"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function getButtons(argument) {
    return [
        [
            {
                action: 'done',
                argument: argument,
                text: '‚úÖ –†–µ—à–∏–ª'
            },
            {
                action: 'failed',
                argument: argument,
                text: '‚ùå –ù–µ —Ä–µ—à–∏–ª'
            },
        ]
    ];
}
function getHeader(day) {
    return `‚≠êÔ∏è <b>–î–µ–Ω—å ${day}</b>`;
}
exports.default = {
    id: 'codingCourse',
    name: '–ó–∞–¥–∞—á–∫–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å',
    active: true,
    description: ({ history }) => {
        return [
            'üë®‚Äçüè´ <b>–ó–∞–¥–∞—á–∫–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å</b>',
            '',
            '–î–µ—Ä–∂–∏—Ç–µ —Å–≤–æ–π –º–æ–∑–≥ –≤ —Ç–æ–Ω—É—Å–µ: —Å—Ñ–æ—Ä–º–∏—Ä—É–π—Ç–µ –ø—Ä–∏–≤—ã—á–∫—É —Ä–µ—à–∞—Ç—å –ø–æ –æ–¥–Ω–æ–π –∫—Ä–∞–π–Ω–µ –ø–æ–ø—É–ª—è—Ä–Ω–æ–π –∑–∞–¥–∞—á–∫–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.',
            '–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ: —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é –≤—ã –±—É–¥–µ—Ç–µ —É–º–µ—Ç—å —Ä–µ—à–∞—Ç—å –Ω–∞ 7 —Ç–∏–ø–æ–≤—ã—Ö –∑–∞–¥–∞—á–µ–∫ –±–æ–ª—å—à–µ, —á–µ–º —Å–µ–π—á–∞—Å.',
            '',
            '–í —Ç–µ—á–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏ –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á–∫—É –≤ –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ –≤—Ä–µ–º—è.',
            '<i>–ü–æ–º–Ω–∏—Ç–µ –æ–± –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–µ—à–µ–Ω–∏—è:</i>',
            '<i>1. –†–µ—à–∏—Ç–µ –∑–∞–¥–∞—á–∫—É –≤–ª–æ–±</i>',
            '<i>2. –ü–µ—Ä–µ–ø–∏—à–∏—Ç–µ –Ω–∞ –±–æ–ª–µ–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ</i>',
            '',
            '–û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω—É–∂–Ω–æ: –∫–∞–∫ –º–∏–Ω–∏–º—É–º, —ç—Ç–æ –Ω–µ—É–¥–æ–±–Ω–æ.',
        ].join('\n');
    },
    state: {
        tasks: {}
    },
    initial: 'start',
    blocks: {
        start: {
            execute: async ({ state, setState, transition }) => {
                const allTasks = ['day1', 'day2', 'day3', 'day4', 'day5', 'day6', 'day7'];
                const restTasks = allTasks.filter(task => state.tasks[task] == null);
                if (restTasks.length <= 0) {
                    await transition('end');
                }
                else {
                    let nextTask = restTasks[Math.floor(Math.random() * restTasks.length)];
                    if (!Object.keys(state.tasks).length) {
                        nextTask = 'day1';
                    }
                    await setState({
                        tasks: Object.assign({}, state.tasks, {
                            [nextTask]: false,
                        })
                    });
                    await transition(nextTask);
                }
            }
        },
        end: {
            final: true,
            wait: true,
            execute: async ({ state, send }) => {
                await send({
                    message: [
                        'üë®‚Äçüè´ <b>–í–æ—Ç –∏ –ø—Ä–æ—à–ª–∞ –Ω–µ–¥–µ–ª—è</b>',
                        '',
                        `–í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ ${Object.values(state.tasks).filter(x => x).length} –∏–∑ 7 –∑–∞–¥–∞—á`,
                        '',
                        `–ü–æ–≤—Ç–æ—Ä—è–π—Ç–µ —á–∞—â–µ, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –≤ —Ç–æ–Ω—É—Å–µ.`,
                    ].join('\n')
                });
            }
        },
        day1: {
            execute: async ({ state, send, transition }) => {
                await send({
                    message: [
                        getHeader(Object.keys(state.tasks).length),
                        '–ù–∞–ø–∏—à–∏—Ç–µ –∞–Ω–∞–ª–æ–≥ _.get –≤ lodash/underscore.',
                        '',
                        `–ü—Ä–∏–º–µ—Ä—ã:`,
                        `<code>get({ a: { b: 1 } }, 'a.b') // 1</code>`,
                        `<code>get({ a: { b: 1 } }, 'a.c') // undefined</code>`,
                        `<code>get({ }, 'a.c') // undefined</code>`,
                        '',
                        `https://jsbin.com/wevotijida/edit?js,console,output`,
                    ].join('\n'),
                    buttons: getButtons('day1'),
                });
                await transition('start');
            },
        },
        day2: {
            wait: true,
            execute: async ({ state, send, transition }) => {
                await send({
                    message: [
                        getHeader(Object.keys(state.tasks).length),
                        '–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é-–≤–∞–ª–∏–¥–∞—Ç–æ—Ä —Å–∫–æ–±–æ–∫.',
                        '',
                        `–ü—Ä–∏–º–µ—Ä—ã:`,
                        `<code>check('{[()]}') // true</code>`,
                        `<code>check('{[(])}') // false</code>`,
                        '',
                        `https://jsbin.com/zemucivogu/edit?js,console,output`,
                    ].join('\n'),
                    buttons: getButtons('day2'),
                });
                await transition('start');
            },
        },
        day3: {
            wait: true,
            execute: async ({ state, send, transition }) => {
                await send({
                    message: [
                        getHeader(Object.keys(state.tasks).length),
                        `–†–∞–∑–≤–µ—Ä–Ω–∏—Ç–µ –º–Ω–æ–≥–æ–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤.`,
                        '',
                        '–ü—Ä–∏–º–µ—Ä—ã:',
                        `<code>flat([1, 2, [3, 4]]); // [1, 2, 3, 4]</code>`,
                        `<code>flat([1, 2, [3, [4]]]); // [1, 2, 3, 4]</code>`,
                        `<i>–í–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞.</i>`,
                        '',
                        `https://jsbin.com/dedixiluzu/edit?js,console,output`,
                    ].join('\n'),
                    buttons: getButtons('day3'),
                });
                await transition('start');
            },
        },
        day4: {
            wait: true,
            execute: async ({ state, send, transition }) => {
                await send({
                    message: [
                        getHeader(Object.keys(state.tasks).length),
                        `–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –º–∞—Å—Å–∏–≤–µ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è —Ç–∞–∫–∞—è –ø–∞—Ä–∞ —á–∏—Å–µ–ª, –∫–æ—Ç–æ—Ä–∞—è –¥–∞—ë—Ç –Ω—É–∂–Ω—É—é —Å—É–º–º—É.`,
                        '',
                        '–ü—Ä–∏–º–µ—Ä—ã:',
                        `<code>check([1, 2, 3, 6], 9) // true: 6+3=9</code>`,
                        `<code>check([1, 1, 3, 4], 2) // true: 1+1=2</code>`,
                        `<code>check([-1, 1, 4, 8], 3) // true: -1+4=3</code>`,
                        `<code>check([1, 4, 8, 9], 6) // false</code>`,
                        '',
                        'https://jsbin.com/getubeqoke/edit?js,console,output',
                    ].join('\n'),
                    buttons: getButtons('day4'),
                });
                await transition('start');
            },
        },
        day5: {
            wait: true,
            execute: async ({ state, send, transition }) => {
                await send({
                    message: [
                        getHeader(Object.keys(state.tasks).length),
                        `–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –Ω–∞ –ø–∞–ª–∏–Ω–¥—Ä–æ–º.`,
                        '',
                        '–ü—Ä–∏–º–µ—Ä—ã:',
                        `<code>isPalindrome('–ö–æ—Ç—É —Ç–∞—â–∞—Ç —É—Ç–æ–ö'); // true</code>`,
                        `<code>isPalindrome('–ú–∞–ª–æ –∫—É–∫–ª–µ –¥–µ–ª ‚Äì –∫ —É–∫–æ–ª–∞–º'); // true</code>`,
                        `<code>isPalindrome('–î—Ä—É–≥–∞—è —Å—Ç—Ä–æ–∫–∞'); // false</code>`,
                        '',
                        'https://jsbin.com/bexaciveke/edit?js,console,output',
                    ].join('\n'),
                    buttons: getButtons('day5'),
                });
                await transition('start');
            },
        },
        day6: {
            wait: true,
            execute: async ({ state, send, transition }) => {
                await send({
                    message: [
                        getHeader(Object.keys(state.tasks).length),
                        `–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è —Å–∂–∏–º–∞–µ—Ç —Å–∏–º–≤–æ–ª—ã –≤ —Å—Ç—Ä–æ–∫–µ.`,
                        '',
                        '–ü—Ä–∏–º–µ—Ä—ã:',
                        `<code>compress('aaabbc') // 'a3b2c1'</code>`,
                        `<code>compress('aabbcca') // 'a2b2c2a1'</code>`,
                        '',
                        'https://jsbin.com/tomukofoxe/edit?js,console,output',
                    ].join('\n'),
                    buttons: getButtons('day6'),
                });
                await transition('start');
            },
        },
        day7: {
            wait: true,
            execute: async ({ state, send, transition }) => {
                await send({
                    message: [
                        getHeader(Object.keys(state.tasks).length),
                        `–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤–µ—Ä–Ω—ë—Ç n-–Ω–æ–µ —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —á–∏—Å–ª–æ.`,
                        '',
                        '–ü—Ä–∏–º–µ—Ä—ã:',
                        `<code>largestN([2, 4, 1, 5, 3], 1) // 5</code>`,
                        `<code>largestN([2, 4, 1, 5, 3], 2) // 4</code>`,
                        `<code>largestN([1, 8, 3, 2], 4) // 1</code>`,
                        '',
                        'https://jsbin.com/kavonezazi/edit?js,console,output',
                    ].join('\n'),
                    buttons: getButtons('day7'),
                });
                await transition('start');
            },
        },
    },
    actions: {
        done: async ({ argument, state, setState, edit, transition, notify }) => {
            if (!argument) {
                return;
            }
            notify(`–û—Ç–ª–∏—á–Ω–æ!`);
            await setState({
                tasks: Object.assign(Object.assign({}, state.tasks), { [argument]: true })
            });
            await edit({
                buttons: []
            });
        },
        failed: async ({ argument, state, setState, edit, transition, notify }) => {
            if (!argument) {
                return;
            }
            notify(`–û—á–µ–Ω—å –∂–∞–ª—å!`);
            await edit({
                buttons: []
            });
        }
    }
};
